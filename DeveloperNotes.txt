Cli

-- new project

    nest new <project name>
    nest new nestjs-task-management

    -- existing project 
    npm i
    npm audit fix

-- npm run build
    npm run build

-- Start 
    npm run start    

C:\jetworks\GitHub\node\nestjs-task-management>npm run start

> nestjs-task-management@0.0.1 start
> nest start

[Nest] 35176  - 11/01/2022, 11:55:52 AM     LOG [NestFactory] Starting Nest application...
[Nest] 35176  - 11/01/2022, 11:55:52 AM     LOG [InstanceLoader] AppModule dependencies initialized +54ms
[Nest] 35176  - 11/01/2022, 11:55:52 AM     LOG [NestApplication] Nest application successfully started +14ms
    

------- Project structure -----------------

    eslintrcjs -- linting file
    prettierrc -- formatting the files
    nest-cli.json -- nest configuration

    src/main.ts
        bootstrap function calls nest factory to create nest js with the root module(AppModule) 
        app listen method and then provide the port no to it.

    src/app.module.ts 
        docorator : @Module from next js common module. this converts class into a module.

    Some file to delete as not needed at this point
    app.controller.spec.ts
    app.controller.ts
    app.service.ts

---- help -------------------
nest g --help 
----------------------------------  New Module -----------------

nest g module tasks

---------------- NestJS Controllers ------------------
1. Responisible for handling incoming requests and returning responses to the client.
2. Bound to a specific path e.g /tasks etc.
3. contains handlers wheich handle endpoints and request methods like GET, POST, DELETE etc.
4. can take advantage of dependency injection to comnsume providers within the same module.

    --- define controller ---
    @Controller

    The decorator accepts a string which is the path to be handled by the controller.
    e.g. 
    @Controller('/tasks')
    export class TasksController {
        ....
    }

    ---- Handler in a controller ---
    @Get , @Post , @Delete etc.
    e.g. 
    @Controller('/tasks')
    export class TasksController {
        @Get()
        getAllTasks() {
            ...
            return ...;
        }

        @Post()
        createTask() {
            ....
            return ... ;
        }
    }

    ----------- Create a controller -------------

    nest g controller tasks --no-spec 

    ---------------------------------------------

    --------------- Nestjs providers ------------

    1. Nestjs providers can be injected into constructors if decoratored as @injectable, via dependency injection. 
    2. Can be a plain value, a class, sync/async factory etc.
    3. Providers must be proviced to a module for them to be usable. 
    4. Can be exported from a module - and then be available to other modules that import it. 

        --------------- services ----------
        1. Defined as privicers. Not all providers are services. 
        2. Singleton when wrapperd with @injectable() and provided to a module.
        3. The main soruce of business logic. for e.g a service will be called from a controller to validate data, create an item in database and return a response. 

    Dependency injection
    Any component winin the NestJS echosystems can inject a provider that is decorated with the @Injectable. 

    We define the dependencies in the constructor of the class. NestJS will take care of the injection for us, and it will then be available as a class property.

    import { TasksService } from './tasks.service' ; 
        @Controller('/tasks')
    export class TasksController {
        constructor (private tasksService: TaskService) {}

        @Get()
        async getAllTasks() {
            return await this.tasksService.getAllTasks();
        }

    }

    ---------------- create a Task service -----------------------------
    nest g service tasks --no-spec 























